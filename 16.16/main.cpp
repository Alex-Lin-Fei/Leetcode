#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

vector<int> subSort(vector<int> &array) {
    if (array.empty())
        return {-1, -1};
    int l = 0, r = array.size() - 1;
//    找到无序子数组的左边界
    while (l < array.size() - 1 && array[l] <= array[l + 1])
        l++;
    if (l == array.size() - 1)
        return {-1, -1};
    while (r > 0 && array[r] >= array[r - 1])
        r--;
    cout << l << ' ' << r << endl;
//    找出最大值和最小值
    int maxV = *max_element(array.begin() + l, array.begin() + r + 1);
    int minV = *min_element(array.begin() + l, array.begin() + r + 1);
    cout << maxV << ' ' << minV << endl;
    int left = upper_bound(array.begin(), array.begin() + l, minV) - array.begin();
    int right = lower_bound(array.begin() + r, array.end(), maxV) - array.begin();
    cout << left << ' ' << right << endl;
    cout << array[right] << endl;
    if (right == array.size() || array[right] >= maxV)
        right--;
//    if (array[left] == minV)
//        left++;
    cout << left << ' ' << right << endl;
    return {left, right};
}

int main() {
    vector<int> v{-400, -399, -388, -384, -383, -381, -380, -375, -367, -367, -366, -366, -365, -359, -358, -356, -347,
                  -345, -342, -342, -337, -336, -333, -331, -331, -329, -329, -327, -325, -325, -322, -321, -321, -320,
                  -316, -313, -313, -312, -311, -309, -304, -304, -302, -302, -297, -296, -295, -294, -292, -285, -284,
                  -282, -282, -281, -281, -279, -275, -275, -272, -272, -271, -271, -269, -264, -263, -263, -262, -261,
                  -260, -260, -259, -257, -255, -253, -253, -251, -251, -250, -247, -246, -245, -244, -243, -243, -240,
                  -237, -233, -231, -230, -229, -227, -227, -226, -221, -220, -219, -217, -217, -216, -213, -207, -205,
                  -204, -200, -199, -194, -194, -187, -186, -186, -185, -184, -183, -180, -179, -177, -176, -175, -175,
                  -172, -172, -170, -167, -167, -167, -166, -164, -160, -159, -157, -154, -152, -149, -148, -147, -146,
                  -144, -142, -142, -140, -139, -134, -133, -125, -119, -119, -114, -113, -110, -108, -107, -107, -104,
                  -102, -101, -101, -101, -99, -96, -92, -92, -83, -83, -81, -81, -80, -75, -74, -74, -71, -69, -65,
                  -64, -62, -62, -60, -58, -58, -58, -55, -48, -42, -42, -40, -36, -34, -33, -30, -29, -27, -26, -24,
                  -23, -22, -19, -10, -10, -8, -5, -5, -1, 0, 3, 5, 10, 10, 10, 18, 20, 21, 22, 27, 28, 29, 31, 31, 40,
                  45, 48, 48, 50, 52, 54, 54, 56, 57, 57, 63, 63, 65, 65, 69, 69, 70, 72, 73, 73, 73, 76, 87, 89, 93,
                  94, 98, 103, 107, 109, 115, 117, 119, 121, 124, 125, 125, 129, 130, 132, 135, 136, 136, 137, 138, 139,
                  142, 145, 149, 150, 153, 153, 154, 155, 156, 156, 157, 159, 160, 162, 164, 164, 171, 172, 173, 175,
                  175, 179, 182, 182, 182, 187, 188, 188, 189, 192, 194, 195, 196, 197, 201, 203, 204, 205, 205, 208,
                  215, 215, 215, 222, 227, 227, 227, 227, 231, 231, 233, 234, 239, 239, 240, 241, 241, 244, 245, 246,
                  247, 248, 250, 251, 252, 254, 258, 258, 261, 263, 264, 267, 268, 269, 271, 273, 275, 277, 277, 277,
                  277, 291, 277, 287, 289, 311, 305, 282, 288, 298, 290, 298, 306, 296, 290, 303, 310, 300, 279, 288,
                  312, 289, 294, 305, 312, 312, 313, 313, 313, 316, 318, 319, 328, 331, 331, 335, 336, 339, 341, 342,
                  349, 352, 353, 355, 355, 359, 361, 362, 364, 364, 365, 369, 371, 372, 377, 378, 383, 388, 390, 395,
                  398, 399, 401, 402, 402};
    subSort(v);
    return 0;
}
